
satumaimo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005344  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005504  08005504  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005504  08005504  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800550c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000224  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f451  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e83  00000000  00000000  00016491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00018318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa6  00000000  00000000  00019080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b98b  00000000  00000000  00019b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001048c  00000000  00000000  000354b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a70a9  00000000  00000000  0004593d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ec9e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038fc  00000000  00000000  000eca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f0328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054b4 	.word	0x080054b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080054b4 	.word	0x080054b4

080001c8 <select_ID>:
//static uint32_t debug_counter = 0; /* デバッグ用カウンター */
//static uint32_t rx_process_counter = 0; /* 受信処理カウンター */
static uint32_t last_can_any_rx_tick = 0;   // 任意のCANメッセージ受信時刻
int my_can_ids[NUM_MY_IDS] = {1};  // 標準ID 0x001
int decimal;
void select_ID(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	GPIO_PinState state_A = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80001ce:	2102      	movs	r1, #2
 80001d0:	481b      	ldr	r0, [pc, #108]	@ (8000240 <select_ID+0x78>)
 80001d2:	f002 f9dd 	bl	8002590 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState state_B = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80001da:	2101      	movs	r1, #1
 80001dc:	4818      	ldr	r0, [pc, #96]	@ (8000240 <select_ID+0x78>)
 80001de:	f002 f9d7 	bl	8002590 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState state_C = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80001e6:	2101      	movs	r1, #1
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ec:	f002 f9d0 	bl	8002590 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	717b      	strb	r3, [r7, #5]
	bool A = !state_A;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	bf0c      	ite	eq
 80001fa:	2301      	moveq	r3, #1
 80001fc:	2300      	movne	r3, #0
 80001fe:	713b      	strb	r3, [r7, #4]
	bool B = !state_B;
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	2b00      	cmp	r3, #0
 8000204:	bf0c      	ite	eq
 8000206:	2301      	moveq	r3, #1
 8000208:	2300      	movne	r3, #0
 800020a:	70fb      	strb	r3, [r7, #3]
	bool C = !state_C;
 800020c:	797b      	ldrb	r3, [r7, #5]
 800020e:	2b00      	cmp	r3, #0
 8000210:	bf0c      	ite	eq
 8000212:	2301      	moveq	r3, #1
 8000214:	2300      	movne	r3, #0
 8000216:	70bb      	strb	r3, [r7, #2]

	decimal = (A << 2) | (B << 1) | (C << 0);
 8000218:	793b      	ldrb	r3, [r7, #4]
 800021a:	009a      	lsls	r2, r3, #2
 800021c:	78fb      	ldrb	r3, [r7, #3]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	431a      	orrs	r2, r3
 8000222:	78bb      	ldrb	r3, [r7, #2]
 8000224:	4313      	orrs	r3, r2
 8000226:	4a07      	ldr	r2, [pc, #28]	@ (8000244 <select_ID+0x7c>)
 8000228:	6013      	str	r3, [r2, #0]
	my_can_ids[0] = decimal + 320;
 800022a:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <select_ID+0x7c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8000232:	4a05      	ldr	r2, [pc, #20]	@ (8000248 <select_ID+0x80>)
 8000234:	6013      	str	r3, [r2, #0]
}
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	48000400 	.word	0x48000400
 8000244:	2000022c 	.word	0x2000022c
 8000248:	20000000 	.word	0x20000000

0800024c <is_my_can_id>:
bool is_my_can_id(uint32_t id) {
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NUM_MY_IDS; i++) {
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e00b      	b.n	8000272 <is_my_can_id+0x26>
        if (my_can_ids[i] == id) {
 800025a:	4a0b      	ldr	r2, [pc, #44]	@ (8000288 <is_my_can_id+0x3c>)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	429a      	cmp	r2, r3
 8000266:	d101      	bne.n	800026c <is_my_can_id+0x20>
            return true;
 8000268:	2301      	movs	r3, #1
 800026a:	e006      	b.n	800027a <is_my_can_id+0x2e>
    for (int i = 0; i < NUM_MY_IDS; i++) {
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3301      	adds	r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b00      	cmp	r3, #0
 8000276:	ddf0      	ble.n	800025a <is_my_can_id+0xe>
        }
    }
    return false;
 8000278:	2300      	movs	r3, #0
}
 800027a:	4618      	mov	r0, r3
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b08c      	sub	sp, #48	@ 0x30
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    /* FIFOのすべてのメッセージを処理（最新を優先） */
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8000294:	e041      	b.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
    {
        last_can_any_rx_tick = HAL_GetTick();  // どんなメッセージでも更新
 8000296:	f001 f96b 	bl	8001570 <HAL_GetTick>
 800029a:	4603      	mov	r3, r0
 800029c:	4a27      	ldr	r2, [pc, #156]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800029e:	6013      	str	r3, [r2, #0]

        if (rxHeader.IDE == CAN_ID_STD && is_my_can_id(rxHeader.StdId)) {
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d139      	bne.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ffcf 	bl	800024c <is_my_can_id>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d032      	beq.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
            /* LED点灯（受信成功表示） */
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	4821      	ldr	r0, [pc, #132]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80002ba:	f002 f981 	bl	80025c0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2180      	movs	r1, #128	@ 0x80
 80002c2:	481f      	ldr	r0, [pc, #124]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80002c4:	f002 f97c 	bl	80025c0 <HAL_GPIO_WritePin>

            last_can_rx_tick = HAL_GetTick();  // 自分宛なら更新
 80002c8:	f001 f952 	bl	8001570 <HAL_GetTick>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80002d0:	6013      	str	r3, [r2, #0]

            /* 常に最新データに更新（rx_readyの状態に関係なく） */
            last_len = rxHeader.DLC;
 80002d2:	6a3b      	ldr	r3, [r7, #32]
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80002d8:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < last_len; ++i)
 80002da:	2300      	movs	r3, #0
 80002dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80002e0:	e00e      	b.n	8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
            {
                last_rx[i] = rxData[i];
 80002e2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80002e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80002ea:	3230      	adds	r2, #48	@ 0x30
 80002ec:	443a      	add	r2, r7
 80002ee:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 80002f2:	4a16      	ldr	r2, [pc, #88]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80002f4:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < last_len; ++i)
 80002f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80002fa:	3301      	adds	r3, #1
 80002fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800030a:	429a      	cmp	r2, r3
 800030c:	d3e9      	bcc.n	80002e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800030e:	f3bf 8f4f 	dsb	sy
}
 8000312:	bf00      	nop

            /* メモリバリアを追加 */
            __DSB();

            /* 新しいデータが来たことを通知 */
            rx_ready = 1;
 8000314:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	f107 0210 	add.w	r2, r7, #16
 8000322:	2100      	movs	r1, #0
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f001 fb38 	bl	800199a <HAL_CAN_GetRxMessage>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0b2      	beq.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
        }

        /* 継続して次のメッセージもチェック */
    }
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	3730      	adds	r7, #48	@ 0x30
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000228 	.word	0x20000228
 8000340:	48000400 	.word	0x48000400
 8000344:	20000224 	.word	0x20000224
 8000348:	20000218 	.word	0x20000218
 800034c:	20000210 	.word	0x20000210
 8000350:	2000020c 	.word	0x2000020c

08000354 <pwm_limit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline uint32_t pwm_limit(TIM_HandleTypeDef *htim, int32_t val)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  uint32_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000364:	60fb      	str	r3, [r7, #12]
  uint32_t mag = (uint32_t)(val >= 0 ? val : -val);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	60bb      	str	r3, [r7, #8]
  return (mag > arr) ? arr : mag;
 8000370:	68ba      	ldr	r2, [r7, #8]
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	4293      	cmp	r3, r2
 8000376:	bf28      	it	cs
 8000378:	4613      	movcs	r3, r2
}
 800037a:	4618      	mov	r0, r3
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <set_bidirectional_pwm>:

static inline void set_bidirectional_pwm(
    TIM_HandleTypeDef *htim_pos, uint32_t ch_pos,
    TIM_HandleTypeDef *htim_neg, uint32_t ch_neg,
    int16_t val)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	603b      	str	r3, [r7, #0]
  if (val > 0)
 8000394:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dd5f      	ble.n	800045c <set_bidirectional_pwm+0xd6>
  {
    uint32_t duty = pwm_limit(htim_pos, val);
 800039c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80003a0:	4619      	mov	r1, r3
 80003a2:	68f8      	ldr	r0, [r7, #12]
 80003a4:	f7ff ffd6 	bl	8000354 <pwm_limit>
 80003a8:	6138      	str	r0, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim_pos, ch_pos, duty);
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <set_bidirectional_pwm+0x34>
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	693a      	ldr	r2, [r7, #16]
 80003b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80003b8:	e023      	b.n	8000402 <set_bidirectional_pwm+0x7c>
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2b04      	cmp	r3, #4
 80003be:	d104      	bne.n	80003ca <set_bidirectional_pwm+0x44>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	6393      	str	r3, [r2, #56]	@ 0x38
 80003c8:	e01b      	b.n	8000402 <set_bidirectional_pwm+0x7c>
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d104      	bne.n	80003da <set_bidirectional_pwm+0x54>
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003d8:	e013      	b.n	8000402 <set_bidirectional_pwm+0x7c>
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	2b0c      	cmp	r3, #12
 80003de:	d104      	bne.n	80003ea <set_bidirectional_pwm+0x64>
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80003e8:	e00b      	b.n	8000402 <set_bidirectional_pwm+0x7c>
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2b10      	cmp	r3, #16
 80003ee:	d104      	bne.n	80003fa <set_bidirectional_pwm+0x74>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80003f8:	e003      	b.n	8000402 <set_bidirectional_pwm+0x7c>
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	65d3      	str	r3, [r2, #92]	@ 0x5c
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d104      	bne.n	8000412 <set_bidirectional_pwm+0x8c>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	635a      	str	r2, [r3, #52]	@ 0x34
  else
  {
    __HAL_TIM_SET_COMPARE(htim_pos, ch_pos, 0);
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
  }
}
 8000410:	e0e1      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d104      	bne.n	8000422 <set_bidirectional_pwm+0x9c>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	2300      	movs	r3, #0
 800041e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000420:	e0d9      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	2b08      	cmp	r3, #8
 8000426:	d104      	bne.n	8000432 <set_bidirectional_pwm+0xac>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	2300      	movs	r3, #0
 800042e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000430:	e0d1      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	2b0c      	cmp	r3, #12
 8000436:	d104      	bne.n	8000442 <set_bidirectional_pwm+0xbc>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	2300      	movs	r3, #0
 800043e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000440:	e0c9      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b10      	cmp	r3, #16
 8000446:	d104      	bne.n	8000452 <set_bidirectional_pwm+0xcc>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	2300      	movs	r3, #0
 800044e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000450:	e0c1      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	2300      	movs	r3, #0
 8000458:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800045a:	e0bc      	b.n	80005d6 <set_bidirectional_pwm+0x250>
  else if (val < 0)
 800045c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000460:	2b00      	cmp	r3, #0
 8000462:	da5f      	bge.n	8000524 <set_bidirectional_pwm+0x19e>
    uint32_t duty = pwm_limit(htim_neg, val);
 8000464:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ff72 	bl	8000354 <pwm_limit>
 8000470:	6178      	str	r0, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, duty);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d104      	bne.n	8000482 <set_bidirectional_pwm+0xfc>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000480:	e023      	b.n	80004ca <set_bidirectional_pwm+0x144>
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2b04      	cmp	r3, #4
 8000486:	d104      	bne.n	8000492 <set_bidirectional_pwm+0x10c>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000490:	e01b      	b.n	80004ca <set_bidirectional_pwm+0x144>
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2b08      	cmp	r3, #8
 8000496:	d104      	bne.n	80004a2 <set_bidirectional_pwm+0x11c>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80004a0:	e013      	b.n	80004ca <set_bidirectional_pwm+0x144>
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	2b0c      	cmp	r3, #12
 80004a6:	d104      	bne.n	80004b2 <set_bidirectional_pwm+0x12c>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80004b0:	e00b      	b.n	80004ca <set_bidirectional_pwm+0x144>
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2b10      	cmp	r3, #16
 80004b6:	d104      	bne.n	80004c2 <set_bidirectional_pwm+0x13c>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	6593      	str	r3, [r2, #88]	@ 0x58
 80004c0:	e003      	b.n	80004ca <set_bidirectional_pwm+0x144>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    __HAL_TIM_SET_COMPARE(htim_pos, ch_pos, 0);
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d104      	bne.n	80004da <set_bidirectional_pwm+0x154>
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004d8:	e07d      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_pos, ch_pos, 0);
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d104      	bne.n	80004ea <set_bidirectional_pwm+0x164>
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	6393      	str	r3, [r2, #56]	@ 0x38
 80004e8:	e075      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d104      	bne.n	80004fa <set_bidirectional_pwm+0x174>
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	2300      	movs	r3, #0
 80004f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80004f8:	e06d      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	2b0c      	cmp	r3, #12
 80004fe:	d104      	bne.n	800050a <set_bidirectional_pwm+0x184>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	6413      	str	r3, [r2, #64]	@ 0x40
 8000508:	e065      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	2b10      	cmp	r3, #16
 800050e:	d104      	bne.n	800051a <set_bidirectional_pwm+0x194>
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	6593      	str	r3, [r2, #88]	@ 0x58
 8000518:	e05d      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000522:	e058      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_pos, ch_pos, 0);
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d104      	bne.n	8000534 <set_bidirectional_pwm+0x1ae>
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	@ 0x34
 8000532:	e023      	b.n	800057c <set_bidirectional_pwm+0x1f6>
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d104      	bne.n	8000544 <set_bidirectional_pwm+0x1be>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	6393      	str	r3, [r2, #56]	@ 0x38
 8000542:	e01b      	b.n	800057c <set_bidirectional_pwm+0x1f6>
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	2b08      	cmp	r3, #8
 8000548:	d104      	bne.n	8000554 <set_bidirectional_pwm+0x1ce>
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000552:	e013      	b.n	800057c <set_bidirectional_pwm+0x1f6>
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	2b0c      	cmp	r3, #12
 8000558:	d104      	bne.n	8000564 <set_bidirectional_pwm+0x1de>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	6413      	str	r3, [r2, #64]	@ 0x40
 8000562:	e00b      	b.n	800057c <set_bidirectional_pwm+0x1f6>
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	2b10      	cmp	r3, #16
 8000568:	d104      	bne.n	8000574 <set_bidirectional_pwm+0x1ee>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	6593      	str	r3, [r2, #88]	@ 0x58
 8000572:	e003      	b.n	800057c <set_bidirectional_pwm+0x1f6>
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2300      	movs	r3, #0
 800057a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <set_bidirectional_pwm+0x206>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2200      	movs	r2, #0
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800058a:	e024      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d104      	bne.n	800059c <set_bidirectional_pwm+0x216>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800059a:	e01c      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b08      	cmp	r3, #8
 80005a0:	d104      	bne.n	80005ac <set_bidirectional_pwm+0x226>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80005aa:	e014      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2b0c      	cmp	r3, #12
 80005b0:	d104      	bne.n	80005bc <set_bidirectional_pwm+0x236>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005ba:	e00c      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	2b10      	cmp	r3, #16
 80005c0:	d104      	bne.n	80005cc <set_bidirectional_pwm+0x246>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005ca:	e004      	b.n	80005d6 <set_bidirectional_pwm+0x250>
    __HAL_TIM_SET_COMPARE(htim_neg, ch_neg, 0);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80005d4:	e7ff      	b.n	80005d6 <set_bidirectional_pwm+0x250>
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b092      	sub	sp, #72	@ 0x48
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 ff69 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f9a7 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fca9 	bl	8000f44 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f2:	f000 fa33 	bl	8000a5c <MX_TIM1_Init>
  MX_CAN_Init();
 80005f6:	f000 f9fb 	bl	80009f0 <MX_CAN_Init>
  MX_TIM2_Init();
 80005fa:	f000 faf5 	bl	8000be8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fe:	f000 fb75 	bl	8000cec <MX_TIM3_Init>
  MX_TIM17_Init();
 8000602:	f000 fbf5 	bl	8000df0 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000606:	f000 fc6d 	bl	8000ee4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	21c0      	movs	r1, #192	@ 0xc0
 800060e:	48a0      	ldr	r0, [pc, #640]	@ (8000890 <main+0x2b0>)
 8000610:	f001 ffd6 	bl	80025c0 <HAL_GPIO_WritePin>
  select_ID();
 8000614:	f7ff fdd8 	bl	80001c8 <select_ID>
  // フィルタ（全受信に変更）
  CAN_FilterTypeDef sFilterConfig = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2228      	movs	r2, #40	@ 0x28
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 ff1a 	bl	800545a <memset>
  sFilterConfig.FilterBank = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800062e:	2301      	movs	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24

  // 全ての標準IDを受信するための設定
  sFilterConfig.FilterIdHigh = 0x0000;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]

  // マスクで全許可（フィルタを無効化）
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8000646:	2301      	movs	r3, #1
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
  sFilterConfig.SlaveStartFilterBank = 14;
 800064a:	230e      	movs	r3, #14
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c


  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4619      	mov	r1, r3
 8000654:	488f      	ldr	r0, [pc, #572]	@ (8000894 <main+0x2b4>)
 8000656:	f001 f892 	bl	800177e <HAL_CAN_ConfigFilter>

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	4619      	mov	r1, r3
 8000660:	488c      	ldr	r0, [pc, #560]	@ (8000894 <main+0x2b4>)
 8000662:	f001 f88c 	bl	800177e <HAL_CAN_ConfigFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <main+0x90>
  {
    Error_Handler();
 800066c:	f000 fcc2 	bl	8000ff4 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000670:	4888      	ldr	r0, [pc, #544]	@ (8000894 <main+0x2b4>)
 8000672:	f001 f94e 	bl	8001912 <HAL_CAN_Start>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <main+0xa0>
  {
    Error_Handler();
 800067c:	f000 fcba 	bl	8000ff4 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan,
 8000680:	f240 710a 	movw	r1, #1802	@ 0x70a
 8000684:	4883      	ldr	r0, [pc, #524]	@ (8000894 <main+0x2b4>)
 8000686:	f001 faaa 	bl	8001bde <HAL_CAN_ActivateNotification>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <main+0xb4>
                                   CAN_IT_RX_FIFO0_OVERRUN |
                                   CAN_IT_ERROR_WARNING |
                                   CAN_IT_ERROR_PASSIVE |
                                   CAN_IT_BUSOFF) != HAL_OK)
  {
    Error_Handler();
 8000690:	f000 fcb0 	bl	8000ff4 <Error_Handler>
  }
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000694:	2100      	movs	r1, #0
 8000696:	4880      	ldr	r0, [pc, #512]	@ (8000898 <main+0x2b8>)
 8000698:	f003 fba6 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800069c:	2104      	movs	r1, #4
 800069e:	487e      	ldr	r0, [pc, #504]	@ (8000898 <main+0x2b8>)
 80006a0:	f003 fba2 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006a4:	2108      	movs	r1, #8
 80006a6:	487c      	ldr	r0, [pc, #496]	@ (8000898 <main+0x2b8>)
 80006a8:	f003 fb9e 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006ac:	2104      	movs	r1, #4
 80006ae:	487b      	ldr	r0, [pc, #492]	@ (800089c <main+0x2bc>)
 80006b0:	f003 fb9a 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80006b4:	210c      	movs	r1, #12
 80006b6:	4879      	ldr	r0, [pc, #484]	@ (800089c <main+0x2bc>)
 80006b8:	f003 fb96 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006bc:	2100      	movs	r1, #0
 80006be:	4878      	ldr	r0, [pc, #480]	@ (80008a0 <main+0x2c0>)
 80006c0:	f003 fb92 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006c4:	2104      	movs	r1, #4
 80006c6:	4876      	ldr	r0, [pc, #472]	@ (80008a0 <main+0x2c0>)
 80006c8:	f003 fb8e 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4875      	ldr	r0, [pc, #468]	@ (80008a4 <main+0x2c4>)
 80006d0:	f003 fb8a 	bl	8003de8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

        if (rx_ready) {
 80006d4:	4b74      	ldr	r3, [pc, #464]	@ (80008a8 <main+0x2c8>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 80a4 	beq.w	8000828 <main+0x248>
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
            __disable_irq();
            uint8_t len = last_len;
 80006e4:	4b71      	ldr	r3, [pc, #452]	@ (80008ac <main+0x2cc>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            uint8_t buf[8];
            // ガード（万一の異常長対策）
            if (len > 8) len = 8;
 80006ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d902      	bls.n	80006fa <main+0x11a>
 80006f4:	2308      	movs	r3, #8
 80006f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            for (uint8_t i = 0; i < len; ++i) buf[i] = last_rx[i];
 80006fa:	2300      	movs	r3, #0
 80006fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000700:	e00f      	b.n	8000722 <main+0x142>
 8000702:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000706:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800070a:	4969      	ldr	r1, [pc, #420]	@ (80008b0 <main+0x2d0>)
 800070c:	5c8a      	ldrb	r2, [r1, r2]
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	3340      	adds	r3, #64	@ 0x40
 8000712:	443b      	add	r3, r7
 8000714:	f803 2c40 	strb.w	r2, [r3, #-64]
 8000718:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800071c:	3301      	adds	r3, #1
 800071e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000722:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000726:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800072a:	429a      	cmp	r2, r3
 800072c:	d3e9      	bcc.n	8000702 <main+0x122>
            rx_ready = 0;
 800072e:	4b5e      	ldr	r3, [pc, #376]	@ (80008a8 <main+0x2c8>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000734:	b662      	cpsie	i
}
 8000736:	bf00      	nop
            __enable_irq();

            // 必須: 8バイト揃っているか確認（4チャネル×16bit前提）
            if (len >= 8) {
 8000738:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800073c:	2b07      	cmp	r3, #7
 800073e:	d953      	bls.n	80007e8 <main+0x208>
                for (int i = 0; i < 4; ++i) {
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000744:	e024      	b.n	8000790 <main+0x1b0>
                    int16_t v = (int16_t)((buf[i * 2 + 1] << 8) | buf[i * 2]); // little-endian
 8000746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	3301      	adds	r3, #1
 800074c:	3340      	adds	r3, #64	@ 0x40
 800074e:	443b      	add	r3, r7
 8000750:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000754:	b21b      	sxth	r3, r3
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	b21a      	sxth	r2, r3
 800075a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	3340      	adds	r3, #64	@ 0x40
 8000760:	443b      	add	r3, r7
 8000762:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    // 対称に ±32767 へクランプ（absで32768にならないよう配慮するならこれでOK）
                    v = CLAMP(v, -32767, 32767);
 800076c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000770:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000774:	d002      	beq.n	800077c <main+0x19c>
 8000776:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800077a:	e000      	b.n	800077e <main+0x19e>
 800077c:	4b4d      	ldr	r3, [pc, #308]	@ (80008b4 <main+0x2d4>)
 800077e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    power[i] = v;
 8000780:	494d      	ldr	r1, [pc, #308]	@ (80008b8 <main+0x2d8>)
 8000782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000784:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000786:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (int i = 0; i < 4; ++i) {
 800078a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800078c:	3301      	adds	r3, #1
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000792:	2b03      	cmp	r3, #3
 8000794:	ddd7      	ble.n	8000746 <main+0x166>
                }

                // M0
                set_bidirectional_pwm(&htim2, TIM_CHANNEL_2, &htim2, TIM_CHANNEL_4, power[0]);
 8000796:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <main+0x2d8>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b21b      	sxth	r3, r3
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	230c      	movs	r3, #12
 80007a0:	4a3e      	ldr	r2, [pc, #248]	@ (800089c <main+0x2bc>)
 80007a2:	2104      	movs	r1, #4
 80007a4:	483d      	ldr	r0, [pc, #244]	@ (800089c <main+0x2bc>)
 80007a6:	f7ff fdee 	bl	8000386 <set_bidirectional_pwm>
                // M1
                set_bidirectional_pwm(&htim3, TIM_CHANNEL_2, &htim3, TIM_CHANNEL_1, power[1]);
 80007aa:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <main+0x2d8>)
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	4a3a      	ldr	r2, [pc, #232]	@ (80008a0 <main+0x2c0>)
 80007b6:	2104      	movs	r1, #4
 80007b8:	4839      	ldr	r0, [pc, #228]	@ (80008a0 <main+0x2c0>)
 80007ba:	f7ff fde4 	bl	8000386 <set_bidirectional_pwm>
                // M2（別タイマの組み合わせ）
                set_bidirectional_pwm(&htim1, TIM_CHANNEL_1, &htim17, TIM_CHANNEL_1, power[2]);
 80007be:	4b3e      	ldr	r3, [pc, #248]	@ (80008b8 <main+0x2d8>)
 80007c0:	889b      	ldrh	r3, [r3, #4]
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	4a36      	ldr	r2, [pc, #216]	@ (80008a4 <main+0x2c4>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4832      	ldr	r0, [pc, #200]	@ (8000898 <main+0x2b8>)
 80007ce:	f7ff fdda 	bl	8000386 <set_bidirectional_pwm>
                // M3（同一タイマ内の別チャネル）
                set_bidirectional_pwm(&htim1, TIM_CHANNEL_3, &htim1, TIM_CHANNEL_2, power[3]);
 80007d2:	4b39      	ldr	r3, [pc, #228]	@ (80008b8 <main+0x2d8>)
 80007d4:	88db      	ldrh	r3, [r3, #6]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2304      	movs	r3, #4
 80007dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000898 <main+0x2b8>)
 80007de:	2108      	movs	r1, #8
 80007e0:	482d      	ldr	r0, [pc, #180]	@ (8000898 <main+0x2b8>)
 80007e2:	f7ff fdd0 	bl	8000386 <set_bidirectional_pwm>
 80007e6:	e01f      	b.n	8000828 <main+0x248>
            } else {
                // 足りないフレームは無視（必要ならフェイルセーフ）
                // 例: 全停止
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80007e8:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <main+0x2bc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	639a      	str	r2, [r3, #56]	@ 0x38
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80007f0:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <main+0x2bc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	641a      	str	r2, [r3, #64]	@ 0x40
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <main+0x2c0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	639a      	str	r2, [r3, #56]	@ 0x38
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <main+0x2c0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <main+0x2b8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	@ 0x34
                __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);
 8000810:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <main+0x2c4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <main+0x2b8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000820:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <main+0x2b8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	639a      	str	r2, [r3, #56]	@ 0x38
            }
            // ここで buf[0..len-1] を使って追加処理があれば
        }

        // CAN通信状態に応じたLED表示とフェイルセーフ
        uint32_t now = HAL_GetTick();
 8000828:	f000 fea2 	bl	8001570 <HAL_GetTick>
 800082c:	6338      	str	r0, [r7, #48]	@ 0x30

        if (now - last_can_any_rx_tick > 50) {
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <main+0x2dc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	2b32      	cmp	r3, #50	@ 0x32
 8000838:	d942      	bls.n	80008c0 <main+0x2e0>
            // 50ms以上CAN無信号ならLED両方消灯全停止
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	@ 0x40
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <main+0x2b0>)
 8000840:	f001 febe 	bl	80025c0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	4811      	ldr	r0, [pc, #68]	@ (8000890 <main+0x2b0>)
 800084a:	f001 feb9 	bl	80025c0 <HAL_GPIO_WritePin>

            // 全停止
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <main+0x2bc>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <main+0x2bc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <main+0x2c0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2200      	movs	r2, #0
 8000864:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <main+0x2c0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <main+0x2b8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <main+0x2c4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2200      	movs	r2, #0
 800087c:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <main+0x2b8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2200      	movs	r2, #0
 8000884:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000886:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <main+0x2b8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2200      	movs	r2, #0
 800088c:	639a      	str	r2, [r3, #56]	@ 0x38
 800088e:	e721      	b.n	80006d4 <main+0xf4>
 8000890:	48000400 	.word	0x48000400
 8000894:	2000002c 	.word	0x2000002c
 8000898:	20000054 	.word	0x20000054
 800089c:	200000a0 	.word	0x200000a0
 80008a0:	200000ec 	.word	0x200000ec
 80008a4:	20000138 	.word	0x20000138
 80008a8:	2000020c 	.word	0x2000020c
 80008ac:	20000218 	.word	0x20000218
 80008b0:	20000210 	.word	0x20000210
 80008b4:	ffff8001 	.word	0xffff8001
 80008b8:	2000021c 	.word	0x2000021c
 80008bc:	20000228 	.word	0x20000228
        } else if (now - last_can_rx_tick > 50) {
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <main+0x344>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	2b32      	cmp	r3, #50	@ 0x32
 80008ca:	f67f af03 	bls.w	80006d4 <main+0xf4>
            // 自分宛CAN通信が50ms以上来なかったらPIN6消灯PIN7点灯で全停止
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2140      	movs	r1, #64	@ 0x40
 80008d2:	4815      	ldr	r0, [pc, #84]	@ (8000928 <main+0x348>)
 80008d4:	f001 fe74 	bl	80025c0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2180      	movs	r1, #128	@ 0x80
 80008dc:	4812      	ldr	r0, [pc, #72]	@ (8000928 <main+0x348>)
 80008de:	f001 fe6f 	bl	80025c0 <HAL_GPIO_WritePin>

            // 全停止
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <main+0x34c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <main+0x34c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2200      	movs	r2, #0
 80008f0:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <main+0x350>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2200      	movs	r2, #0
 80008f8:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <main+0x350>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <main+0x354>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <main+0x358>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2200      	movs	r2, #0
 8000910:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <main+0x354>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2200      	movs	r2, #0
 8000918:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <main+0x354>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2200      	movs	r2, #0
 8000920:	639a      	str	r2, [r3, #56]	@ 0x38
    while (1) {
 8000922:	e6d7      	b.n	80006d4 <main+0xf4>
 8000924:	20000224 	.word	0x20000224
 8000928:	48000400 	.word	0x48000400
 800092c:	200000a0 	.word	0x200000a0
 8000930:	200000ec 	.word	0x200000ec
 8000934:	20000054 	.word	0x20000054
 8000938:	20000138 	.word	0x20000138

0800093c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b096      	sub	sp, #88	@ 0x58
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000946:	2228      	movs	r2, #40	@ 0x28
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f004 fd85 	bl	800545a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000984:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000988:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fe2e 	bl	80025f0 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800099a:	f000 fb2b 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800099e:	230f      	movs	r3, #15
 80009a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2102      	movs	r1, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fe26 	bl	800360c <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009c6:	f000 fb15 	bl	8000ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 f82a 	bl	8003a30 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009e2:	f000 fb07 	bl	8000ff4 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3758      	adds	r7, #88	@ 0x58
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_CAN_Init+0x64>)
 80009f6:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <MX_CAN_Init+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_CAN_Init+0x64>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a0e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a12:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a16:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a1a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;  /* 自動再送を有効化 */
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_CAN_Init+0x64>)
 8000a42:	f000 fda1 	bl	8001588 <HAL_CAN_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a4c:	f000 fad2 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000002c 	.word	0x2000002c
 8000a58:	40006400 	.word	0x40006400

08000a5c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09a      	sub	sp, #104	@ 0x68
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	222c      	movs	r2, #44	@ 0x2c
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fcdf 	bl	800545a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9c:	4b50      	ldr	r3, [pc, #320]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000a9e:	4a51      	ldr	r2, [pc, #324]	@ (8000be4 <MX_TIM1_Init+0x188>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000aa4:	221f      	movs	r2, #31
 8000aa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32767;
 8000aae:	4b4c      	ldr	r3, [pc, #304]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000ab0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b48      	ldr	r3, [pc, #288]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b47      	ldr	r3, [pc, #284]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4845      	ldr	r0, [pc, #276]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000aca:	f003 f8d5 	bl	8003c78 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 fa8e 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483e      	ldr	r0, [pc, #248]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000ae6:	f003 fb7f 	bl	80041e8 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000af0:	f000 fa80 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af4:	483a      	ldr	r0, [pc, #232]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000af6:	f003 f916 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b00:	f000 fa78 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b14:	4619      	mov	r1, r3
 8000b16:	4832      	ldr	r0, [pc, #200]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000b18:	f004 f81a 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b22:	f000 fa67 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b26:	2360      	movs	r3, #96	@ 0x60
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4825      	ldr	r0, [pc, #148]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000b4c:	f003 fa38 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b56:	f000 fa4d 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	481f      	ldr	r0, [pc, #124]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000b64:	f003 fa2c 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000b6e:	f000 fa41 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b76:	2208      	movs	r2, #8
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4819      	ldr	r0, [pc, #100]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000b7c:	f003 fa20 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000b86:	f000 fa35 	bl	8000ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000bb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000bc2:	f004 f833 	bl	8004c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000bcc:	f000 fa12 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_TIM1_Init+0x184>)
 8000bd2:	f000 faf7 	bl	80011c4 <HAL_TIM_MspPostInit>
}
 8000bd6:	bf00      	nop
 8000bd8:	3768      	adds	r7, #104	@ 0x68
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000054 	.word	0x20000054
 8000be4:	40012c00 	.word	0x40012c00

08000be8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	@ 0x38
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000c22:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c24:	221f      	movs	r2, #31
 8000c26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c30:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000c34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c42:	4829      	ldr	r0, [pc, #164]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c44:	f003 f818 	bl	8003c78 <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f000 f9d1 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4822      	ldr	r0, [pc, #136]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c60:	f003 fac2 	bl	80041e8 <HAL_TIM_ConfigClockSource>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c6a:	f000 f9c3 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c6e:	481e      	ldr	r0, [pc, #120]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c70:	f003 f859 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c7a:	f000 f9bb 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4816      	ldr	r0, [pc, #88]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000c8e:	f003 ff5f 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c98:	f000 f9ac 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9c:	2360      	movs	r3, #96	@ 0x60
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000cb4:	f003 f984 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cbe:	f000 f999 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000cca:	f003 f979 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000cd4:	f000 f98e 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <MX_TIM2_Init+0x100>)
 8000cda:	f000 fa73 	bl	80011c4 <HAL_TIM_MspPostInit>
}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	@ 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000a0 	.word	0x200000a0

08000cec <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	@ 0x38
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1e:	4b32      	ldr	r3, [pc, #200]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d20:	4a32      	ldr	r2, [pc, #200]	@ (8000dec <MX_TIM3_Init+0x100>)
 8000d22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000d24:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d26:	221f      	movs	r2, #31
 8000d28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32767;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d32:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000d36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d44:	4828      	ldr	r0, [pc, #160]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d46:	f002 ff97 	bl	8003c78 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d50:	f000 f950 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4821      	ldr	r0, [pc, #132]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d62:	f003 fa41 	bl	80041e8 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d6c:	f000 f942 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d70:	481d      	ldr	r0, [pc, #116]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d72:	f002 ffd8 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d7c:	f000 f93a 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4816      	ldr	r0, [pc, #88]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000d90:	f003 fede 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d9a:	f000 f92b 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	2360      	movs	r3, #96	@ 0x60
 8000da0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000db6:	f003 f903 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000dc0:	f000 f918 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000dcc:	f003 f8f8 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000dd6:	f000 f90d 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <MX_TIM3_Init+0xfc>)
 8000ddc:	f000 f9f2 	bl	80011c4 <HAL_TIM_MspPostInit>
}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	@ 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000ec 	.word	0x200000ec
 8000dec:	40000400 	.word	0x40000400

08000df0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b092      	sub	sp, #72	@ 0x48
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	222c      	movs	r2, #44	@ 0x2c
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 fb22 	bl	800545a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e16:	4b31      	ldr	r3, [pc, #196]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e18:	4a31      	ldr	r2, [pc, #196]	@ (8000ee0 <MX_TIM17_Init+0xf0>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 31;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e1e:	221f      	movs	r2, #31
 8000e20:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 32767;
 8000e28:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e2e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e42:	4826      	ldr	r0, [pc, #152]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e44:	f002 ff18 	bl	8003c78 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000e4e:	f000 f8d1 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e52:	4822      	ldr	r0, [pc, #136]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e54:	f002 ff67 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000e5e:	f000 f8c9 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	@ 0x60
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4815      	ldr	r0, [pc, #84]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000e88:	f003 f89a 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000e92:	f000 f8af 	bl	8000ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000ebe:	f003 feb5 	bl	8004c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ec8:	f000 f894 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <MX_TIM17_Init+0xec>)
 8000ece:	f000 f979 	bl	80011c4 <HAL_TIM_MspPostInit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	@ 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000138 	.word	0x20000138
 8000ee0:	40014800 	.word	0x40014800

08000ee4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000eea:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <MX_USART2_UART_Init+0x5c>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f28:	f003 fef8 	bl	8004d1c <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f32:	f000 f85f 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000184 	.word	0x20000184
 8000f40:	40004400 	.word	0x40004400

08000f44 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_GPIO_Init+0xa8>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <MX_GPIO_Init+0xa8>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_GPIO_Init+0xa8>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_GPIO_Init+0xa8>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	@ (8000fec <MX_GPIO_Init+0xa8>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_GPIO_Init+0xa8>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	21c0      	movs	r1, #192	@ 0xc0
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <MX_GPIO_Init+0xac>)
 8000f90:	f001 fb16 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000faa:	f001 f97f 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <MX_GPIO_Init+0xac>)
 8000fc2:	f001 f973 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000fc6:	23c0      	movs	r3, #192	@ 0xc0
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <MX_GPIO_Init+0xac>)
 8000fde:	f001 f965 	bl	80022ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <Error_Handler+0x8>

08001000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_MspInit+0x44>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_MspInit+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_MspInit+0x44>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_MspInit+0x44>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_MspInit+0x44>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_MspInit+0x44>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <HAL_CAN_MspInit+0xc0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d149      	bne.n	80010fe <HAL_CAN_MspInit+0xb6>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800106a:	4b28      	ldr	r3, [pc, #160]	@ (800110c <HAL_CAN_MspInit+0xc4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a27      	ldr	r2, [pc, #156]	@ (800110c <HAL_CAN_MspInit+0xc4>)
 8001070:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HAL_CAN_MspInit+0xc4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b22      	ldr	r3, [pc, #136]	@ (800110c <HAL_CAN_MspInit+0xc4>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a21      	ldr	r2, [pc, #132]	@ (800110c <HAL_CAN_MspInit+0xc4>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <HAL_CAN_MspInit+0xc4>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800109a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80010ac:	2309      	movs	r3, #9
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ba:	f001 f8f7 	bl	80022ac <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2013      	movs	r0, #19
 80010c4:	f001 f8bb 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80010c8:	2013      	movs	r0, #19
 80010ca:	f001 f8d4 	bl	8002276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2014      	movs	r0, #20
 80010d4:	f001 f8b3 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80010d8:	2014      	movs	r0, #20
 80010da:	f001 f8cc 	bl	8002276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2015      	movs	r0, #21
 80010e4:	f001 f8ab 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80010e8:	2015      	movs	r0, #21
 80010ea:	f001 f8c4 	bl	8002276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2016      	movs	r0, #22
 80010f4:	f001 f8a3 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80010f8:	2016      	movs	r0, #22
 80010fa:	f001 f8bc 	bl	8002276 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40006400 	.word	0x40006400
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <HAL_TIM_Base_MspInit+0xa4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10c      	bne.n	800113c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001122:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001128:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800112c:	6193      	str	r3, [r2, #24]
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800113a:	e034      	b.n	80011a6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001144:	d10c      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
}
 800115e:	e022      	b.n	80011a6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10c      	bne.n	8001184 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	e010      	b.n	80011a6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10b      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
}
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40014800 	.word	0x40014800

080011c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a46      	ldr	r2, [pc, #280]	@ (80012fc <HAL_TIM_MspPostInit+0x138>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d11e      	bne.n	8001224 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b46      	ldr	r3, [pc, #280]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a45      	ldr	r2, [pc, #276]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b43      	ldr	r3, [pc, #268]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011fe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001210:	2306      	movs	r3, #6
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f001 f845 	bl	80022ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001222:	e067      	b.n	80012f4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800122c:	d11d      	bne.n	800126a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a33      	ldr	r2, [pc, #204]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001246:	230a      	movs	r3, #10
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001256:	2301      	movs	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001264:	f001 f822 	bl	80022ac <HAL_GPIO_Init>
}
 8001268:	e044      	b.n	80012f4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a25      	ldr	r2, [pc, #148]	@ (8001304 <HAL_TIM_MspPostInit+0x140>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d11d      	bne.n	80012b0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a21      	ldr	r2, [pc, #132]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127e:	6153      	str	r3, [r2, #20]
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800128c:	2350      	movs	r3, #80	@ 0x50
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800129c:	2302      	movs	r3, #2
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f000 ffff 	bl	80022ac <HAL_GPIO_Init>
}
 80012ae:	e021      	b.n	80012f4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM17)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <HAL_TIM_MspPostInit+0x144>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11c      	bne.n	80012f4 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_TIM_MspPostInit+0x13c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d2:	2380      	movs	r3, #128	@ 0x80
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80012e2:	2301      	movs	r3, #1
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f0:	f000 ffdc 	bl	80022ac <HAL_GPIO_Init>
}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	@ 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40000400 	.word	0x40000400
 8001308:	40014800 	.word	0x40014800

0800130c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a18      	ldr	r2, [pc, #96]	@ (800138c <HAL_UART_MspInit+0x80>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d129      	bne.n	8001382 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_UART_MspInit+0x84>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <HAL_UART_MspInit+0x84>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_UART_MspInit+0x84>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_UART_MspInit+0x84>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <HAL_UART_MspInit+0x84>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	6153      	str	r3, [r2, #20]
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_UART_MspInit+0x84>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800135e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001370:	2307      	movs	r3, #7
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137e:	f000 ff95 	bl	80022ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004400 	.word	0x40004400
 8001390:	40021000 	.word	0x40021000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f8ad 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <CAN_TX_IRQHandler+0x10>)
 80013fa:	f000 fc16 	bl	8001c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000002c 	.word	0x2000002c

08001408 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <CAN_RX0_IRQHandler+0x10>)
 800140e:	f000 fc0c 	bl	8001c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000002c 	.word	0x2000002c

0800141c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <CAN_RX1_IRQHandler+0x10>)
 8001422:	f000 fc02 	bl	8001c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000002c 	.word	0x2000002c

08001430 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <CAN_SCE_IRQHandler+0x10>)
 8001436:	f000 fbf8 	bl	8001c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000002c 	.word	0x2000002c

08001444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800147c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001448:	f000 f826 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f003 fffb 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001476:	f7ff f8b3 	bl	80005e0 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800147c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001488:	0800550c 	.word	0x0800550c
  ldr r2, =_sbss
 800148c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001490:	20000234 	.word	0x20000234

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_Init+0x28>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <HAL_Init+0x28>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 feab 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fd92 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fec3 	bl	8002292 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 fe8b 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000004 	.word	0x20000004
 8001540:	2000000c 	.word	0x2000000c
 8001544:	20000008 	.word	0x20000008

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000230 	.word	0x20000230

08001570 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;  
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000230 	.word	0x20000230

08001588 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0ed      	b.n	8001776 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd4e 	bl	8001048 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff ffd8 	bl	8001570 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff ffd4 	bl	8001570 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0c5      	b.n	8001776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0e5      	beq.n	80015c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0202 	bic.w	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff ffb2 	bl	8001570 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff ffae 	bl	8001570 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e09f      	b.n	8001776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e5      	bne.n	8001610 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7e1b      	ldrb	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e007      	b.n	800166e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7e5b      	ldrb	r3, [r3, #25]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e007      	b.n	8001698 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001696:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e9b      	ldrb	r3, [r3, #26]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0220 	bic.w	r2, r2, #32
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7edb      	ldrb	r3, [r3, #27]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0210 	bic.w	r2, r2, #16
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e007      	b.n	80016ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0210 	orr.w	r2, r2, #16
 80016ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f1b      	ldrb	r3, [r3, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e007      	b.n	8001716 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0208 	bic.w	r2, r2, #8
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7f5b      	ldrb	r3, [r3, #29]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0204 	orr.w	r2, r2, #4
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0204 	bic.w	r2, r2, #4
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	ea42 0103 	orr.w	r1, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800177e:	b480      	push	{r7}
 8001780:	b087      	sub	sp, #28
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d003      	beq.n	80017a4 <HAL_CAN_ConfigFilter+0x26>
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	f040 80aa 	bne.w	80018f8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2201      	movs	r2, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d123      	bne.n	8001826 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001800:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3248      	adds	r2, #72	@ 0x48
 8001806:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800181a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	3348      	adds	r3, #72	@ 0x48
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d122      	bne.n	8001874 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800184e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3248      	adds	r2, #72	@ 0x48
 8001854:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001868:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	3348      	adds	r3, #72	@ 0x48
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800188e:	e007      	b.n	80018a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018ba:	e007      	b.n	80018cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018ea:	f023 0201 	bic.w	r2, r3, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e006      	b.n	8001906 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d12e      	bne.n	8001984 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2202      	movs	r2, #2
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800193e:	f7ff fe17 	bl	8001570 <HAL_GetTick>
 8001942:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001944:	e012      	b.n	800196c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001946:	f7ff fe13 	bl	8001570 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b0a      	cmp	r3, #10
 8001952:	d90b      	bls.n	800196c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2205      	movs	r2, #5
 8001964:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e012      	b.n	8001992 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e5      	bne.n	8001946 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e006      	b.n	8001992 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800199a:	b480      	push	{r7}
 800199c:	b087      	sub	sp, #28
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d003      	beq.n	80019be <HAL_CAN_GetRxMessage+0x24>
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	f040 8103 	bne.w	8001bc4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10e      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0f7      	b.n	8001bd2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0e8      	b.n	8001bd2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	331b      	adds	r3, #27
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0204 	and.w	r2, r3, #4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0d5b      	lsrs	r3, r3, #21
 8001a2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	331b      	adds	r3, #27
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	08db      	lsrs	r3, r3, #3
 8001a48:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	331b      	adds	r3, #27
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0202 	and.w	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	331b      	adds	r3, #27
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2208      	movs	r2, #8
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	e00b      	b.n	8001a9e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	331b      	adds	r3, #27
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 020f 	and.w	r2, r3, #15
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	331b      	adds	r3, #27
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	331b      	adds	r3, #27
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0a1a      	lsrs	r2, r3, #8
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0c1a      	lsrs	r2, r3, #16
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3302      	adds	r3, #2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e1a      	lsrs	r2, r3, #24
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3304      	adds	r3, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0a1a      	lsrs	r2, r3, #8
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	3305      	adds	r3, #5
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0c1a      	lsrs	r2, r3, #16
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3306      	adds	r3, #6
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e1a      	lsrs	r2, r3, #24
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3307      	adds	r3, #7
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0220 	orr.w	r2, r2, #32
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	e007      	b.n	8001bc0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e006      	b.n	8001bd2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d002      	beq.n	8001bfc <HAL_CAN_ActivateNotification+0x1e>
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d109      	bne.n	8001c10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e006      	b.n	8001c1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b08a      	sub	sp, #40	@ 0x28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d07c      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d023      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f983 	bl	8001f98 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c92:	e016      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca6:	e00c      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cba:	e002      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f989 	bl	8001fd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d024      	beq.n	8001d16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f963 	bl	8001fac <HAL_CAN_TxMailbox1CompleteCallback>
 8001ce6:	e016      	b.n	8001d16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfa:	e00c      	b.n	8001d16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0e:	e002      	b.n	8001d16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f969 	bl	8001fe8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d024      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f943 	bl	8001fc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d3a:	e016      	b.n	8001d6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4e:	e00c      	b.n	8001d6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d62:	e002      	b.n	8001d6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f949 	bl	8001ffc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2208      	movs	r2, #8
 8001da8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f930 	bl	8002010 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7fe fa5f 	bl	800028c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f912 	bl	8002038 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8f9 	bl	8002024 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8fc 	bl	800204c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8f5 	bl	8002060 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d07b      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d072      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d043      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03e      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ef8:	2b60      	cmp	r3, #96	@ 0x60
 8001efa:	d02b      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x32a>
 8001efc:	2b60      	cmp	r3, #96	@ 0x60
 8001efe:	d82e      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f00:	2b50      	cmp	r3, #80	@ 0x50
 8001f02:	d022      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x320>
 8001f04:	2b50      	cmp	r3, #80	@ 0x50
 8001f06:	d82a      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f08:	2b40      	cmp	r3, #64	@ 0x40
 8001f0a:	d019      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x316>
 8001f0c:	2b40      	cmp	r3, #64	@ 0x40
 8001f0e:	d826      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f10:	2b30      	cmp	r3, #48	@ 0x30
 8001f12:	d010      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x30c>
 8001f14:	2b30      	cmp	r3, #48	@ 0x30
 8001f16:	d822      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d002      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x2f8>
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d005      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f20:	e01d      	b.n	8001f5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2a:	e019      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f34:	e014      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3e:	e00f      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f48:	e00a      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f52:	e005      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f5c:	e000      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2204      	movs	r2, #4
 8001f76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f872 	bl	8002074 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	@ 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	@ (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	@ (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	@ (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	@ 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	@ 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff3e 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff31 	bl	80020ec <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	e14e      	b.n	800255a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8140 	beq.w	8002554 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d005      	beq.n	80022ec <HAL_GPIO_Init+0x40>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	6939      	ldr	r1, [r7, #16]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 809a 	beq.w	8002554 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b55      	ldr	r3, [pc, #340]	@ (8002578 <HAL_GPIO_Init+0x2cc>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a54      	ldr	r2, [pc, #336]	@ (8002578 <HAL_GPIO_Init+0x2cc>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_GPIO_Init+0x2cc>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002438:	4a50      	ldr	r2, [pc, #320]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002462:	d013      	beq.n	800248c <HAL_GPIO_Init+0x1e0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a46      	ldr	r2, [pc, #280]	@ (8002580 <HAL_GPIO_Init+0x2d4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00d      	beq.n	8002488 <HAL_GPIO_Init+0x1dc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a45      	ldr	r2, [pc, #276]	@ (8002584 <HAL_GPIO_Init+0x2d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_Init+0x1d8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a44      	ldr	r2, [pc, #272]	@ (8002588 <HAL_GPIO_Init+0x2dc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_GPIO_Init+0x1d4>
 800247c:	2303      	movs	r3, #3
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x1e2>
 8002480:	2305      	movs	r3, #5
 8002482:	e004      	b.n	800248e <HAL_GPIO_Init+0x1e2>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x1e2>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_GPIO_Init+0x1e2>
 800248c:	2300      	movs	r3, #0
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4093      	lsls	r3, r2
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800249e:	4937      	ldr	r1, [pc, #220]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d0:	4a2e      	ldr	r2, [pc, #184]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d6:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024fa:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002500:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002524:	4a19      	ldr	r2, [pc, #100]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252a:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800254e:	4a0f      	ldr	r2, [pc, #60]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f aea9 	bne.w	80022bc <HAL_GPIO_Init+0x10>
  }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	48000400 	.word	0x48000400
 8002584:	48000800 	.word	0x48000800
 8002588:	48000c00 	.word	0x48000c00
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e001      	b.n	80025b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002600:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f000 bff4 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 816d 	beq.w	8002906 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800262c:	4bb4      	ldr	r3, [pc, #720]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002638:	4bb1      	ldr	r3, [pc, #708]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x104>
 8002644:	4bae      	ldr	r3, [pc, #696]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d150      	bne.n	80026f4 <HAL_RCC_OscConfig+0x104>
 8002652:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002656:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002666:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b3f      	cmp	r3, #63	@ 0x3f
 8002672:	d802      	bhi.n	800267a <HAL_RCC_OscConfig+0x8a>
 8002674:	4ba2      	ldr	r3, [pc, #648]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0xb6>
 800267a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800267e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800268e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002692:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002696:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026a2:	4b97      	ldr	r3, [pc, #604]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026aa:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026ba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8114 	beq.w	8002904 <HAL_RCC_OscConfig+0x314>
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 810b 	bne.w	8002904 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f000 bf85 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x124>
 8002706:	4b7e      	ldr	r3, [pc, #504]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7d      	ldr	r2, [pc, #500]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e036      	b.n	8002782 <HAL_RCC_OscConfig+0x192>
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x14e>
 8002724:	4b76      	ldr	r3, [pc, #472]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a75      	ldr	r2, [pc, #468]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a72      	ldr	r2, [pc, #456]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e021      	b.n	8002782 <HAL_RCC_OscConfig+0x192>
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800274e:	d10c      	bne.n	800276a <HAL_RCC_OscConfig+0x17a>
 8002750:	4b6b      	ldr	r3, [pc, #428]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6a      	ldr	r2, [pc, #424]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002756:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b68      	ldr	r3, [pc, #416]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a67      	ldr	r2, [pc, #412]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e00b      	b.n	8002782 <HAL_RCC_OscConfig+0x192>
 800276a:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a64      	ldr	r2, [pc, #400]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b62      	ldr	r3, [pc, #392]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a61      	ldr	r2, [pc, #388]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800277c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002780:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002782:	4b5f      	ldr	r3, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	f023 020f 	bic.w	r2, r3, #15
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	495a      	ldr	r1, [pc, #360]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 8002798:	4313      	orrs	r3, r2
 800279a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d054      	beq.n	8002856 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fee0 	bl	8001570 <HAL_GetTick>
 80027b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe fedb 	bl	8001570 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d902      	bls.n	80027cc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	f000 bf19 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
 80027cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80027e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ec:	d802      	bhi.n	80027f4 <HAL_RCC_OscConfig+0x204>
 80027ee:	4b44      	ldr	r3, [pc, #272]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	e015      	b.n	8002820 <HAL_RCC_OscConfig+0x230>
 80027f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002808:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800280c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002810:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800281c:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002824:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002828:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002834:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0b0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1c6>
 8002854:	e057      	b.n	8002906 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fe8b 	bl	8001570 <HAL_GetTick>
 800285a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fe86 	bl	8001570 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	@ 0x64
 800286e:	d902      	bls.n	8002876 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	f000 bec4 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
 8002876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800288a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b3f      	cmp	r3, #63	@ 0x3f
 8002896:	d802      	bhi.n	800289e <HAL_RCC_OscConfig+0x2ae>
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x2da>
 800289e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_RCC_OscConfig+0x310>)
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028ce:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80028d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80028de:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1b0      	bne.n	8002860 <HAL_RCC_OscConfig+0x270>
 80028fe:	e002      	b.n	8002906 <HAL_RCC_OscConfig+0x316>
 8002900:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 816c 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800291c:	4bcc      	ldr	r3, [pc, #816]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002928:	4bc9      	ldr	r3, [pc, #804]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d16d      	bne.n	8002a10 <HAL_RCC_OscConfig+0x420>
 8002934:	4bc6      	ldr	r3, [pc, #792]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d167      	bne.n	8002a10 <HAL_RCC_OscConfig+0x420>
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002952:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b3f      	cmp	r3, #63	@ 0x3f
 800295e:	d802      	bhi.n	8002966 <HAL_RCC_OscConfig+0x376>
 8002960:	4bbb      	ldr	r3, [pc, #748]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e013      	b.n	800298e <HAL_RCC_OscConfig+0x39e>
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800297e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800298a:	4bb1      	ldr	r3, [pc, #708]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	2202      	movs	r2, #2
 8002990:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002994:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f002 021f 	and.w	r2, r2, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCC_OscConfig+0x3e6>
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f000 be14 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	21f8      	movs	r1, #248	@ 0xf8
 80029ec:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029f4:	fa91 f1a1 	rbit	r1, r1
 80029f8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80029fc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a00:	fab1 f181 	clz	r1, r1
 8002a04:	b2c9      	uxtb	r1, r1
 8002a06:	408b      	lsls	r3, r1
 8002a08:	4991      	ldr	r1, [pc, #580]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e0f1      	b.n	8002bf4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8083 	beq.w	8002b28 <HAL_RCC_OscConfig+0x538>
 8002a22:	2301      	movs	r3, #1
 8002a24:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a42:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fd8f 	bl	8001570 <HAL_GetTick>
 8002a52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fd8a 	bl	8001570 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d902      	bls.n	8002a6e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f000 bdc8 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a80:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a8c:	d802      	bhi.n	8002a94 <HAL_RCC_OscConfig+0x4a4>
 8002a8e:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e013      	b.n	8002abc <HAL_RCC_OscConfig+0x4cc>
 8002a94:	2302      	movs	r3, #2
 8002a96:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002aac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ab8:	4b65      	ldr	r3, [pc, #404]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	2202      	movs	r2, #2
 8002abe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002ac2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002ac6:	fa92 f2a2 	rbit	r2, r2
 8002aca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002ace:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002ad2:	fab2 f282 	clz	r2, r2
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f042 0220 	orr.w	r2, r2, #32
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f002 021f 	and.w	r2, r2, #31
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0b4      	beq.n	8002a58 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b58      	ldr	r3, [pc, #352]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	21f8      	movs	r1, #248	@ 0xf8
 8002b04:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b0c:	fa91 f1a1 	rbit	r1, r1
 8002b10:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b14:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b18:	fab1 f181 	clz	r1, r1
 8002b1c:	b2c9      	uxtb	r1, r1
 8002b1e:	408b      	lsls	r3, r1
 8002b20:	494b      	ldr	r1, [pc, #300]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
 8002b26:	e065      	b.n	8002bf4 <HAL_RCC_OscConfig+0x604>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2300      	movs	r3, #0
 8002b52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fd0c 	bl	8001570 <HAL_GetTick>
 8002b58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fd07 	bl	8001570 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d902      	bls.n	8002b74 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	f000 bd45 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
 8002b74:	2302      	movs	r3, #2
 8002b76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b92:	d802      	bhi.n	8002b9a <HAL_RCC_OscConfig+0x5aa>
 8002b94:	4b2e      	ldr	r3, [pc, #184]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	e013      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5d2>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002bb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_OscConfig+0x660>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002bc8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002bcc:	fa92 f2a2 	rbit	r2, r2
 8002bd0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002bd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f042 0220 	orr.w	r2, r2, #32
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f002 021f 	and.w	r2, r2, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f202 	lsl.w	r2, r1, r2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1b4      	bne.n	8002b5e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8115 	beq.w	8002e34 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d07e      	beq.n	8002d18 <HAL_RCC_OscConfig+0x728>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x664>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2301      	movs	r3, #1
 8002c42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fc94 	bl	8001570 <HAL_GetTick>
 8002c48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4c:	e00f      	b.n	8002c6e <HAL_RCC_OscConfig+0x67e>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe fc8a 	bl	8001570 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d902      	bls.n	8002c6e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	f000 bcc8 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cac:	2202      	movs	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc8:	4bb0      	ldr	r3, [pc, #704]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	6019      	str	r1, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f1a3 	rbit	r1, r3
 8002ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cee:	6019      	str	r1, [r3, #0]
  return result;
 8002cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0a0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x668>
 8002d16:	e08d      	b.n	8002e34 <HAL_RCC_OscConfig+0x844>
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d3a:	601a      	str	r2, [r3, #0]
  return result;
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b90      	ldr	r3, [pc, #576]	@ (8002f90 <HAL_RCC_OscConfig+0x9a0>)
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	461a      	mov	r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fc09 	bl	8001570 <HAL_GetTick>
 8002d5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe fc04 	bl	8001570 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d902      	bls.n	8002d7a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	f000 bc42 	b.w	80035fe <HAL_RCC_OscConfig+0x100e>
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002da6:	2202      	movs	r2, #2
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002dca:	2202      	movs	r2, #2
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002de4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de6:	4b69      	ldr	r3, [pc, #420]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002df2:	2102      	movs	r1, #2
 8002df4:	6019      	str	r1, [r3, #0]
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f1a3 	rbit	r1, r3
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e0c:	6019      	str	r1, [r3, #0]
  return result;
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d197      	bne.n	8002d64 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 819e 	beq.w	8003186 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e50:	4b4e      	ldr	r3, [pc, #312]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a4a      	ldr	r2, [pc, #296]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	61d3      	str	r3, [r2, #28]
 8002e68:	4b48      	ldr	r3, [pc, #288]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	4b42      	ldr	r3, [pc, #264]	@ (8002f94 <HAL_RCC_OscConfig+0x9a4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11a      	bne.n	8002ecc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e96:	4b3f      	ldr	r3, [pc, #252]	@ (8002f94 <HAL_RCC_OscConfig+0x9a4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f94 <HAL_RCC_OscConfig+0x9a4>)
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fb65 	bl	8001570 <HAL_GetTick>
 8002ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fe fb60 	bl	8001570 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	@ 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e39e      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <HAL_RCC_OscConfig+0x9a4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x8fa>
 8002edc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_OscConfig+0x966>
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x924>
 8002efa:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a20      	ldr	r2, [pc, #128]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	e020      	b.n	8002f56 <HAL_RCC_OscConfig+0x966>
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x94e>
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a18      	ldr	r2, [pc, #96]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x966>
 8002f3e:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f8c <HAL_RCC_OscConfig+0x99c>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8087 	beq.w	8003076 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fe fb02 	bl	8001570 <HAL_GetTick>
 8002f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e012      	b.n	8002f98 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe fafd 	bl	8001570 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d908      	bls.n	8002f98 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e339      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	10908120 	.word	0x10908120
 8002f94:	40007000 	.word	0x40007000
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fde:	601a      	str	r2, [r3, #0]
  return result;
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fe8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0xa10>
 8002ffa:	4b98      	ldr	r3, [pc, #608]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0xa38>
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003008:	2202      	movs	r2, #2
 800300a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fa93 f2a3 	rbit	r2, r3
 800301a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	4b8d      	ldr	r3, [pc, #564]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800302c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003030:	2102      	movs	r1, #2
 8003032:	6011      	str	r1, [r2, #0]
 8003034:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003038:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	fa92 f1a2 	rbit	r1, r2
 8003042:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003046:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800304a:	6011      	str	r1, [r2, #0]
  return result;
 800304c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003050:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	f43f af7f 	beq.w	8002f72 <HAL_RCC_OscConfig+0x982>
 8003074:	e07d      	b.n	8003172 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fa7b 	bl	8001570 <HAL_GetTick>
 800307a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fa76 	bl	8001570 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e2b2      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030a0:	2202      	movs	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030c4:	2202      	movs	r2, #2
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030cc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030de:	601a      	str	r2, [r3, #0]
  return result;
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0xb10>
 80030fa:	4b58      	ldr	r3, [pc, #352]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	e013      	b.n	8003128 <HAL_RCC_OscConfig+0xb38>
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	4b4d      	ldr	r3, [pc, #308]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800312c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003130:	2102      	movs	r1, #2
 8003132:	6011      	str	r1, [r2, #0]
 8003134:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003138:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	fa92 f1a2 	rbit	r1, r2
 8003142:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003146:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800314a:	6011      	str	r1, [r2, #0]
  return result;
 800314c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003150:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f002 021f 	and.w	r2, r2, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d186      	bne.n	8003080 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003172:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b38      	ldr	r3, [pc, #224]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a37      	ldr	r2, [pc, #220]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003184:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8232 	beq.w	80035fc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003198:	4b30      	ldr	r3, [pc, #192]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f000 8201 	beq.w	80035a8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	f040 8157 	bne.w	8003466 <HAL_RCC_OscConfig+0xe76>
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031dc:	601a      	str	r2, [r3, #0]
  return result;
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031e6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe f9b7 	bl	8001570 <HAL_GetTick>
 8003202:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	e009      	b.n	800321c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe f9b2 	bl	8001570 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e1f0      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003240:	601a      	str	r2, [r3, #0]
  return result;
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800324a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b3f      	cmp	r3, #63	@ 0x3f
 8003254:	d804      	bhi.n	8003260 <HAL_RCC_OscConfig+0xc70>
 8003256:	4b01      	ldr	r3, [pc, #4]	@ (800325c <HAL_RCC_OscConfig+0xc6c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	e029      	b.n	80032b0 <HAL_RCC_OscConfig+0xcc0>
 800325c:	40021000 	.word	0x40021000
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003268:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800326c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003280:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800328e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4bc3      	ldr	r3, [pc, #780]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032bc:	6011      	str	r1, [r2, #0]
 80032be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032c2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fa92 f1a2 	rbit	r1, r2
 80032cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032d0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032d4:	6011      	str	r1, [r2, #0]
  return result;
 80032d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032da:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	fab2 f282 	clz	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f042 0220 	orr.w	r2, r2, #32
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	f002 021f 	and.w	r2, r2, #31
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d185      	bne.n	8003208 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fc:	4baf      	ldr	r3, [pc, #700]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	430b      	orrs	r3, r1
 800331e:	49a7      	ldr	r1, [pc, #668]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800332c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003348:	601a      	str	r2, [r3, #0]
  return result;
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003352:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800335e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	461a      	mov	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe f901 	bl	8001570 <HAL_GetTick>
 800336e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003372:	e009      	b.n	8003388 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe f8fc 	bl	8001570 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e13a      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
 8003388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003390:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033ac:	601a      	str	r2, [r3, #0]
  return result;
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b3f      	cmp	r3, #63	@ 0x3f
 80033c0:	d802      	bhi.n	80033c8 <HAL_RCC_OscConfig+0xdd8>
 80033c2:	4b7e      	ldr	r3, [pc, #504]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	e027      	b.n	8003418 <HAL_RCC_OscConfig+0xe28>
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fa93 f2a3 	rbit	r2, r3
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	4b69      	ldr	r3, [pc, #420]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800341c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003420:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	fa92 f1a2 	rbit	r1, r2
 8003434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003438:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800343c:	6011      	str	r1, [r2, #0]
  return result;
 800343e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003442:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	fab2 f282 	clz	r2, r2
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f042 0220 	orr.w	r2, r2, #32
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f002 021f 	and.w	r2, r2, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f202 	lsl.w	r2, r1, r2
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d087      	beq.n	8003374 <HAL_RCC_OscConfig+0xd84>
 8003464:	e0ca      	b.n	80035fc <HAL_RCC_OscConfig+0x100c>
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800346e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003478:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800348a:	601a      	str	r2, [r3, #0]
  return result;
 800348c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003490:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003494:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe f860 	bl	8001570 <HAL_GetTick>
 80034b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e009      	b.n	80034ca <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe f85b 	bl	8001570 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e099      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fa93 f2a3 	rbit	r2, r3
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034ee:	601a      	str	r2, [r3, #0]
  return result;
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b3f      	cmp	r3, #63	@ 0x3f
 8003502:	d802      	bhi.n	800350a <HAL_RCC_OscConfig+0xf1a>
 8003504:	4b2d      	ldr	r3, [pc, #180]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	e027      	b.n	800355a <HAL_RCC_OscConfig+0xf6a>
 800350a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003512:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003538:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <HAL_RCC_OscConfig+0xfcc>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800355e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003562:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003566:	6011      	str	r1, [r2, #0]
 8003568:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800356c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	fa92 f1a2 	rbit	r1, r2
 8003576:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800357a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800357e:	6011      	str	r1, [r2, #0]
  return result;
 8003580:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003584:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	fab2 f282 	clz	r2, r2
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	f042 0220 	orr.w	r2, r2, #32
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f002 021f 	and.w	r2, r2, #31
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d187      	bne.n	80034b6 <HAL_RCC_OscConfig+0xec6>
 80035a6:	e029      	b.n	80035fc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d103      	bne.n	80035c0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e020      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
 80035bc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HAL_RCC_OscConfig+0x1018>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035e4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000

0800360c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b09e      	sub	sp, #120	@ 0x78
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e154      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b89      	ldr	r3, [pc, #548]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b86      	ldr	r3, [pc, #536]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4984      	ldr	r1, [pc, #528]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b82      	ldr	r3, [pc, #520]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e13c      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b7b      	ldr	r3, [pc, #492]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4978      	ldr	r1, [pc, #480]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80cd 	beq.w	800381a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d137      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xec>
 8003688:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800368c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b3f      	cmp	r3, #63	@ 0x3f
 80036a0:	d802      	bhi.n	80036a8 <HAL_RCC_ClockConfig+0x9c>
 80036a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e00f      	b.n	80036c8 <HAL_RCC_ClockConfig+0xbc>
 80036a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80036b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80036bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036c4:	4b62      	ldr	r3, [pc, #392]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036d0:	fa92 f2a2 	rbit	r2, r2
 80036d4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f042 0220 	orr.w	r2, r2, #32
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d171      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0ea      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d137      	bne.n	8003770 <HAL_RCC_ClockConfig+0x164>
 8003700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003704:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800370e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b3f      	cmp	r3, #63	@ 0x3f
 8003718:	d802      	bhi.n	8003720 <HAL_RCC_ClockConfig+0x114>
 800371a:	4b4d      	ldr	r3, [pc, #308]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	e00f      	b.n	8003740 <HAL_RCC_ClockConfig+0x134>
 8003720:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003724:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	647b      	str	r3, [r7, #68]	@ 0x44
 800372e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003732:	643b      	str	r3, [r7, #64]	@ 0x40
 8003734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800373c:	4b44      	ldr	r3, [pc, #272]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003744:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003746:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003748:	fa92 f2a2 	rbit	r2, r2
 800374c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800374e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003750:	fab2 f282 	clz	r2, r2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d135      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0ae      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
 8003770:	2302      	movs	r3, #2
 8003772:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b3f      	cmp	r3, #63	@ 0x3f
 8003786:	d802      	bhi.n	800378e <HAL_RCC_ClockConfig+0x182>
 8003788:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	e00d      	b.n	80037aa <HAL_RCC_ClockConfig+0x19e>
 800378e:	2302      	movs	r3, #2
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
 800379a:	2302      	movs	r3, #2
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	2202      	movs	r2, #2
 80037ac:	61ba      	str	r2, [r7, #24]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	fa92 f2a2 	rbit	r2, r2
 80037b4:	617a      	str	r2, [r7, #20]
  return result;
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	fab2 f282 	clz	r2, r2
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f042 0220 	orr.w	r2, r2, #32
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f002 021f 	and.w	r2, r2, #31
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e07a      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f023 0203 	bic.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	491a      	ldr	r1, [pc, #104]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ea:	f7fd fec1 	bl	8001570 <HAL_GetTick>
 80037ee:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f2:	f7fd febd 	bl	8001570 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e062      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003808:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_RCC_ClockConfig+0x244>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 020c 	and.w	r2, r3, #12
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	429a      	cmp	r2, r3
 8003818:	d1eb      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d215      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003828:	4b08      	ldr	r3, [pc, #32]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 0207 	bic.w	r2, r3, #7
 8003830:	4906      	ldr	r1, [pc, #24]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <HAL_RCC_ClockConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d006      	beq.n	8003854 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e041      	b.n	80038ce <HAL_RCC_ClockConfig+0x2c2>
 800384a:	bf00      	nop
 800384c:	40022000 	.word	0x40022000
 8003850:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b1d      	ldr	r3, [pc, #116]	@ (80038d8 <HAL_RCC_ClockConfig+0x2cc>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	491a      	ldr	r1, [pc, #104]	@ (80038d8 <HAL_RCC_ClockConfig+0x2cc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387e:	4b16      	ldr	r3, [pc, #88]	@ (80038d8 <HAL_RCC_ClockConfig+0x2cc>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4912      	ldr	r1, [pc, #72]	@ (80038d8 <HAL_RCC_ClockConfig+0x2cc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003892:	f000 f829 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8003896:	4601      	mov	r1, r0
 8003898:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <HAL_RCC_ClockConfig+0x2cc>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a0:	22f0      	movs	r2, #240	@ 0xf0
 80038a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	60fa      	str	r2, [r7, #12]
  return result;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	40d3      	lsrs	r3, r2
 80038b6:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x2d0>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	fa21 f303 	lsr.w	r3, r1, r3
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_RCC_ClockConfig+0x2d4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038c2:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_RCC_ClockConfig+0x2d8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fe0e 	bl	80014e8 <HAL_InitTick>
  
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3778      	adds	r7, #120	@ 0x78
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080054cc 	.word	0x080054cc
 80038e0:	20000004 	.word	0x20000004
 80038e4:	20000008 	.word	0x20000008

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003902:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x36>
 8003916:	e026      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	e026      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003944:	4a0e      	ldr	r2, [pc, #56]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	fbb2 f2f3 	udiv	r2, r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e004      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0c      	ldr	r2, [pc, #48]	@ (800398c <HAL_RCC_GetSysClockFreq+0xa4>)
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	613b      	str	r3, [r7, #16]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 8003968:	613b      	str	r3, [r7, #16]
      break;
 800396a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396c:	693b      	ldr	r3, [r7, #16]
}
 800396e:	4618      	mov	r0, r3
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	080054e4 	.word	0x080054e4
 8003988:	080054f4 	.word	0x080054f4
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039ae:	f7ff ffef 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b2:	4601      	mov	r1, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039bc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	fa92 f2a2 	rbit	r2, r2
 80039c8:	603a      	str	r2, [r7, #0]
  return result;
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	fab2 f282 	clz	r2, r2
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	40d3      	lsrs	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	080054dc 	.word	0x080054dc

080039ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039f2:	f7ff ffcd 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039f6:	4601      	mov	r1, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a00:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	fa92 f2a2 	rbit	r2, r2
 8003a0c:	603a      	str	r2, [r7, #0]
  return result;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	40d3      	lsrs	r3, r2
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	080054dc 	.word	0x080054dc

08003a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b092      	sub	sp, #72	@ 0x48
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80cb 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a54:	4b85      	ldr	r3, [pc, #532]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10e      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4a81      	ldr	r2, [pc, #516]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	61d3      	str	r3, [r2, #28]
 8003a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d118      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8a:	4b79      	ldr	r3, [pc, #484]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a78      	ldr	r2, [pc, #480]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7fd fd6b 	bl	8001570 <HAL_GetTick>
 8003a9a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9e:	f7fd fd67 	bl	8001570 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b64      	cmp	r3, #100	@ 0x64
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0d9      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003abc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d07b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d074      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ada:	4b64      	ldr	r3, [pc, #400]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b5d      	ldr	r3, [pc, #372]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	461a      	mov	r2, r3
 8003b04:	2301      	movs	r3, #1
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b54      	ldr	r3, [pc, #336]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d043      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fd18 	bl	8001570 <HAL_GetTick>
 8003b40:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fd fd14 	bl	8001570 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e084      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b66:	2302      	movs	r3, #2
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	61fb      	str	r3, [r7, #28]
  return result;
 8003b72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003b84:	4b39      	ldr	r3, [pc, #228]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	e007      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	613a      	str	r2, [r7, #16]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	fa92 f2a2 	rbit	r2, r2
 8003ba4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	fab2 f282 	clz	r2, r2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f002 021f 	and.w	r2, r2, #31
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0bf      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bc4:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4926      	ldr	r1, [pc, #152]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	f023 0203 	bic.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	491a      	ldr	r1, [pc, #104]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c14:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	f023 0210 	bic.w	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4912      	ldr	r1, [pc, #72]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c32:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	490b      	ldr	r1, [pc, #44]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4903      	ldr	r1, [pc, #12]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3748      	adds	r7, #72	@ 0x48
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	10908100 	.word	0x10908100

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fa36 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fb60 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e049      	b.n	8003dcc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f841 	bl	8003dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fb09 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x24>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e03c      	b.n	8003e86 <HAL_TIM_PWM_Start+0x9e>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d109      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x3e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e02f      	b.n	8003e86 <HAL_TIM_PWM_Start+0x9e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x58>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e022      	b.n	8003e86 <HAL_TIM_PWM_Start+0x9e>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d109      	bne.n	8003e5a <HAL_TIM_PWM_Start+0x72>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e015      	b.n	8003e86 <HAL_TIM_PWM_Start+0x9e>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d109      	bne.n	8003e74 <HAL_TIM_PWM_Start+0x8c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e008      	b.n	8003e86 <HAL_TIM_PWM_Start+0x9e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e088      	b.n	8003fa0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xb6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e9c:	e023      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xfe>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0xc6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eac:	e01b      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xfe>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xd6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ebc:	e013      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xfe>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start+0xe6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ecc:	e00b      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xfe>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_PWM_Start+0xf6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003edc:	e003      	b.n	8003ee6 <HAL_TIM_PWM_Start+0xfe>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fe08 	bl	8004b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <HAL_TIM_PWM_Start+0x1c0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x134>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_TIM_PWM_Start+0x1c4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x134>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	@ (8003fb0 <HAL_TIM_PWM_Start+0x1c8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x134>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <HAL_TIM_PWM_Start+0x1cc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x138>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_TIM_PWM_Start+0x13a>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa8 <HAL_TIM_PWM_Start+0x1c0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x176>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f48:	d009      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x176>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb8 <HAL_TIM_PWM_Start+0x1d0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x176>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <HAL_TIM_PWM_Start+0x1c4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d115      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <HAL_TIM_PWM_Start+0x1d4>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d015      	beq.n	8003f9c <HAL_TIM_PWM_Start+0x1b4>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f76:	d011      	beq.n	8003f9c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	e008      	b.n	8003f9c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e000      	b.n	8003f9e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	00010007 	.word	0x00010007

08003fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0ff      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b14      	cmp	r3, #20
 8003fea:	f200 80f0 	bhi.w	80041ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004049 	.word	0x08004049
 8003ff8:	080041cf 	.word	0x080041cf
 8003ffc:	080041cf 	.word	0x080041cf
 8004000:	080041cf 	.word	0x080041cf
 8004004:	08004089 	.word	0x08004089
 8004008:	080041cf 	.word	0x080041cf
 800400c:	080041cf 	.word	0x080041cf
 8004010:	080041cf 	.word	0x080041cf
 8004014:	080040cb 	.word	0x080040cb
 8004018:	080041cf 	.word	0x080041cf
 800401c:	080041cf 	.word	0x080041cf
 8004020:	080041cf 	.word	0x080041cf
 8004024:	0800410b 	.word	0x0800410b
 8004028:	080041cf 	.word	0x080041cf
 800402c:	080041cf 	.word	0x080041cf
 8004030:	080041cf 	.word	0x080041cf
 8004034:	0800414d 	.word	0x0800414d
 8004038:	080041cf 	.word	0x080041cf
 800403c:	080041cf 	.word	0x080041cf
 8004040:	080041cf 	.word	0x080041cf
 8004044:	0800418d 	.word	0x0800418d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fa18 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0208 	orr.w	r2, r2, #8
 8004062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0204 	bic.w	r2, r2, #4
 8004072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6999      	ldr	r1, [r3, #24]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	619a      	str	r2, [r3, #24]
      break;
 8004086:	e0a5      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fa7e 	bl	8004590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6999      	ldr	r1, [r3, #24]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]
      break;
 80040c8:	e084      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fadd 	bl	8004690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0208 	orr.w	r2, r2, #8
 80040e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0204 	bic.w	r2, r2, #4
 80040f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
      break;
 8004108:	e064      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fb3b 	bl	800478c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69d9      	ldr	r1, [r3, #28]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	021a      	lsls	r2, r3, #8
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	61da      	str	r2, [r3, #28]
      break;
 800414a:	e043      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fb7e 	bl	8004854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800418a:	e023      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fbbc 	bl	8004910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041cc:	e002      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
      break;
 80041d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop

080041e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_TIM_ConfigClockSource+0x1c>
 8004200:	2302      	movs	r3, #2
 8004202:	e0b6      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x18a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004222:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800422e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004240:	d03e      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0xd8>
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004246:	f200 8087 	bhi.w	8004358 <HAL_TIM_ConfigClockSource+0x170>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424e:	f000 8086 	beq.w	800435e <HAL_TIM_ConfigClockSource+0x176>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004256:	d87f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004258:	2b70      	cmp	r3, #112	@ 0x70
 800425a:	d01a      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xaa>
 800425c:	2b70      	cmp	r3, #112	@ 0x70
 800425e:	d87b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004260:	2b60      	cmp	r3, #96	@ 0x60
 8004262:	d050      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x11e>
 8004264:	2b60      	cmp	r3, #96	@ 0x60
 8004266:	d877      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004268:	2b50      	cmp	r3, #80	@ 0x50
 800426a:	d03c      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xfe>
 800426c:	2b50      	cmp	r3, #80	@ 0x50
 800426e:	d873      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d058      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x13e>
 8004274:	2b40      	cmp	r3, #64	@ 0x40
 8004276:	d86f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b30      	cmp	r3, #48	@ 0x30
 800427a:	d064      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x15e>
 800427c:	2b30      	cmp	r3, #48	@ 0x30
 800427e:	d86b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004280:	2b20      	cmp	r3, #32
 8004282:	d060      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x15e>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d867      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05c      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x15e>
 800428c:	2b10      	cmp	r3, #16
 800428e:	d05a      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x15e>
 8004290:	e062      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a2:	f000 fc0f 	bl	8004ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	609a      	str	r2, [r3, #8]
      break;
 80042be:	e04f      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d0:	f000 fbf8 	bl	8004ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042e2:	609a      	str	r2, [r3, #8]
      break;
 80042e4:	e03c      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 fb6c 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2150      	movs	r1, #80	@ 0x50
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fbc5 	bl	8004a8e <TIM_ITRx_SetConfig>
      break;
 8004304:	e02c      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004312:	461a      	mov	r2, r3
 8004314:	f000 fb8b 	bl	8004a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2160      	movs	r1, #96	@ 0x60
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fbb5 	bl	8004a8e <TIM_ITRx_SetConfig>
      break;
 8004324:	e01c      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fb4c 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2140      	movs	r1, #64	@ 0x40
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fba5 	bl	8004a8e <TIM_ITRx_SetConfig>
      break;
 8004344:	e00c      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 fb9c 	bl	8004a8e <TIM_ITRx_SetConfig>
      break;
 8004356:	e003      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      break;
 800435c:	e000      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800435e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a38      	ldr	r2, [pc, #224]	@ (8004470 <TIM_Base_SetConfig+0xf4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0x28>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0x28>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a35      	ldr	r2, [pc, #212]	@ (8004474 <TIM_Base_SetConfig+0xf8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d108      	bne.n	80043b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004470 <TIM_Base_SetConfig+0xf4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c4:	d00f      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004474 <TIM_Base_SetConfig+0xf8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a29      	ldr	r2, [pc, #164]	@ (8004478 <TIM_Base_SetConfig+0xfc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a28      	ldr	r2, [pc, #160]	@ (800447c <TIM_Base_SetConfig+0x100>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_Base_SetConfig+0x6a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a27      	ldr	r2, [pc, #156]	@ (8004480 <TIM_Base_SetConfig+0x104>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a14      	ldr	r2, [pc, #80]	@ (8004470 <TIM_Base_SetConfig+0xf4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_Base_SetConfig+0xc0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a14      	ldr	r2, [pc, #80]	@ (8004478 <TIM_Base_SetConfig+0xfc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_Base_SetConfig+0xc0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a13      	ldr	r2, [pc, #76]	@ (800447c <TIM_Base_SetConfig+0x100>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0xc0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a12      	ldr	r2, [pc, #72]	@ (8004480 <TIM_Base_SetConfig+0x104>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]
  }
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40000400 	.word	0x40000400
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f023 0201 	bic.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 0302 	bic.w	r3, r3, #2
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a28      	ldr	r2, [pc, #160]	@ (8004580 <TIM_OC1_SetConfig+0xfc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_OC1_SetConfig+0x78>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a27      	ldr	r2, [pc, #156]	@ (8004584 <TIM_OC1_SetConfig+0x100>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_OC1_SetConfig+0x78>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a26      	ldr	r2, [pc, #152]	@ (8004588 <TIM_OC1_SetConfig+0x104>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_OC1_SetConfig+0x78>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a25      	ldr	r2, [pc, #148]	@ (800458c <TIM_OC1_SetConfig+0x108>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10c      	bne.n	8004516 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0308 	bic.w	r3, r3, #8
 8004502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <TIM_OC1_SetConfig+0xfc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_OC1_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <TIM_OC1_SetConfig+0x100>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_OC1_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <TIM_OC1_SetConfig+0x104>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_OC1_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a16      	ldr	r2, [pc, #88]	@ (800458c <TIM_OC1_SetConfig+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800453c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800

08004590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f023 0210 	bic.w	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0320 	bic.w	r3, r3, #32
 80045de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a24      	ldr	r2, [pc, #144]	@ (8004680 <TIM_OC2_SetConfig+0xf0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10d      	bne.n	8004610 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800460e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <TIM_OC2_SetConfig+0xf0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00b      	beq.n	8004630 <TIM_OC2_SetConfig+0xa0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <TIM_OC2_SetConfig+0xf4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d007      	beq.n	8004630 <TIM_OC2_SetConfig+0xa0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <TIM_OC2_SetConfig+0xf8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_OC2_SetConfig+0xa0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <TIM_OC2_SetConfig+0xfc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d113      	bne.n	8004658 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004636:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800463e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a23      	ldr	r2, [pc, #140]	@ (800477c <TIM_OC3_SetConfig+0xec>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10d      	bne.n	800470e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800470c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <TIM_OC3_SetConfig+0xec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_OC3_SetConfig+0x9e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a19      	ldr	r2, [pc, #100]	@ (8004780 <TIM_OC3_SetConfig+0xf0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_OC3_SetConfig+0x9e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <TIM_OC3_SetConfig+0xf4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_OC3_SetConfig+0x9e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <TIM_OC3_SetConfig+0xf8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d113      	bne.n	8004756 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800473c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	621a      	str	r2, [r3, #32]
}
 8004770:	bf00      	nop
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800

0800478c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a16      	ldr	r2, [pc, #88]	@ (8004844 <TIM_OC4_SetConfig+0xb8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_OC4_SetConfig+0x7c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <TIM_OC4_SetConfig+0xbc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_OC4_SetConfig+0x7c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a14      	ldr	r2, [pc, #80]	@ (800484c <TIM_OC4_SetConfig+0xc0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC4_SetConfig+0x7c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a13      	ldr	r2, [pc, #76]	@ (8004850 <TIM_OC4_SetConfig+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d109      	bne.n	800481c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800480e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	019b      	lsls	r3, r3, #6
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40014000 	.word	0x40014000
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800

08004854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <TIM_OC5_SetConfig+0xac>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_OC5_SetConfig+0x72>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <TIM_OC5_SetConfig+0xb0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_OC5_SetConfig+0x72>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a13      	ldr	r2, [pc, #76]	@ (8004908 <TIM_OC5_SetConfig+0xb4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_OC5_SetConfig+0x72>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a12      	ldr	r2, [pc, #72]	@ (800490c <TIM_OC5_SetConfig+0xb8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d109      	bne.n	80048da <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	051b      	lsls	r3, r3, #20
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <TIM_OC6_SetConfig+0xb0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00b      	beq.n	8004984 <TIM_OC6_SetConfig+0x74>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <TIM_OC6_SetConfig+0xb4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d007      	beq.n	8004984 <TIM_OC6_SetConfig+0x74>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a14      	ldr	r2, [pc, #80]	@ (80049c8 <TIM_OC6_SetConfig+0xb8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_OC6_SetConfig+0x74>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a13      	ldr	r2, [pc, #76]	@ (80049cc <TIM_OC6_SetConfig+0xbc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d109      	bne.n	8004998 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800498a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 030a 	bic.w	r3, r3, #10
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b087      	sub	sp, #28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f023 0210 	bic.w	r2, r3, #16
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f043 0307 	orr.w	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2201      	movs	r2, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e054      	b.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a24      	ldr	r2, [pc, #144]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd0:	d009      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a13      	ldr	r2, [pc, #76]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a11      	ldr	r2, [pc, #68]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10c      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40014000 	.word	0x40014000

08004c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e060      	b.n	8004d0a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	051b      	lsls	r3, r3, #20
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00

08004d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e040      	b.n	8004db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc fae4 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	@ 0x24
 8004d48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f95e 	bl	8005024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f825 	bl	8004db8 <UART_SetConfig>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e01b      	b.n	8004db0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f9dd 	bl	8005168 <UART_CheckIdleState>
 8004dae:	4603      	mov	r3, r0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b8a      	ldr	r3, [pc, #552]	@ (800500c <UART_SetConfig+0x254>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a78      	ldr	r2, [pc, #480]	@ (8005010 <UART_SetConfig+0x258>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d120      	bne.n	8004e76 <UART_SetConfig+0xbe>
 8004e34:	4b77      	ldr	r3, [pc, #476]	@ (8005014 <UART_SetConfig+0x25c>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d817      	bhi.n	8004e70 <UART_SetConfig+0xb8>
 8004e40:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <UART_SetConfig+0x90>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e65 	.word	0x08004e65
 8004e50:	08004e6b 	.word	0x08004e6b
 8004e54:	08004e5f 	.word	0x08004e5f
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e01d      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e01a      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e64:	2304      	movs	r3, #4
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e017      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e014      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e011      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a67      	ldr	r2, [pc, #412]	@ (8005018 <UART_SetConfig+0x260>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d102      	bne.n	8004e86 <UART_SetConfig+0xce>
 8004e80:	2300      	movs	r3, #0
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e009      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a64      	ldr	r2, [pc, #400]	@ (800501c <UART_SetConfig+0x264>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d102      	bne.n	8004e96 <UART_SetConfig+0xde>
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e001      	b.n	8004e9a <UART_SetConfig+0xe2>
 8004e96:	2310      	movs	r3, #16
 8004e98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea2:	d15a      	bne.n	8004f5a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d827      	bhi.n	8004efa <UART_SetConfig+0x142>
 8004eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0xf8>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe fd68 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61b8      	str	r0, [r7, #24]
        break;
 8004eda:	e013      	b.n	8004f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fd86 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 8004ee0:	61b8      	str	r0, [r7, #24]
        break;
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8005020 <UART_SetConfig+0x268>)
 8004ee6:	61bb      	str	r3, [r7, #24]
        break;
 8004ee8:	e00c      	b.n	8004f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe fcfd 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004eee:	61b8      	str	r0, [r7, #24]
        break;
 8004ef0:	e008      	b.n	8004f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef6:	61bb      	str	r3, [r7, #24]
        break;
 8004ef8:	e004      	b.n	8004f04 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	77bb      	strb	r3, [r7, #30]
        break;
 8004f02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d074      	beq.n	8004ff4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	005a      	lsls	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	441a      	add	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0f      	cmp	r3, #15
 8004f24:	d916      	bls.n	8004f54 <UART_SetConfig+0x19c>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2c:	d212      	bcs.n	8004f54 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f023 030f 	bic.w	r3, r3, #15
 8004f36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	89fa      	ldrh	r2, [r7, #14]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e04f      	b.n	8004ff4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	77bb      	strb	r3, [r7, #30]
 8004f58:	e04c      	b.n	8004ff4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f5a:	7ffb      	ldrb	r3, [r7, #31]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d828      	bhi.n	8004fb2 <UART_SetConfig+0x1fa>
 8004f60:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <UART_SetConfig+0x1b0>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004fa3 	.word	0x08004fa3
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fb3 	.word	0x08004fb3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7fe fd0c 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8004f90:	61b8      	str	r0, [r7, #24]
        break;
 8004f92:	e013      	b.n	8004fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f94:	f7fe fd2a 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 8004f98:	61b8      	str	r0, [r7, #24]
        break;
 8004f9a:	e00f      	b.n	8004fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <UART_SetConfig+0x268>)
 8004f9e:	61bb      	str	r3, [r7, #24]
        break;
 8004fa0:	e00c      	b.n	8004fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fe fca1 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004fa6:	61b8      	str	r0, [r7, #24]
        break;
 8004fa8:	e008      	b.n	8004fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	61bb      	str	r3, [r7, #24]
        break;
 8004fb0:	e004      	b.n	8004fbc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	77bb      	strb	r3, [r7, #30]
        break;
 8004fba:	bf00      	nop
    }

    if (pclk != 0U)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d018      	beq.n	8004ff4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	085a      	lsrs	r2, r3, #1
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	441a      	add	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d909      	bls.n	8004ff0 <UART_SetConfig+0x238>
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe2:	d205      	bcs.n	8004ff0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e001      	b.n	8004ff4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005000:	7fbb      	ldrb	r3, [r7, #30]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	efff69f3 	.word	0xefff69f3
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40004400 	.word	0x40004400
 800501c:	40004800 	.word	0x40004800
 8005020:	007a1200 	.word	0x007a1200

08005024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01a      	beq.n	800513a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005122:	d10a      	bne.n	800513a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]
  }
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b098      	sub	sp, #96	@ 0x60
 800516c:	af02      	add	r7, sp, #8
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005178:	f7fc f9fa 	bl	8001570 <HAL_GetTick>
 800517c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b08      	cmp	r3, #8
 800518a:	d12e      	bne.n	80051ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800518c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005194:	2200      	movs	r2, #0
 8005196:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f88c 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d021      	beq.n	80051ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e6      	bne.n	80051a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e062      	b.n	80052b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d149      	bne.n	800528c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f856 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d03c      	beq.n	800528c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	623b      	str	r3, [r7, #32]
   return(result);
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005230:	633b      	str	r3, [r7, #48]	@ 0x30
 8005232:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e6      	bne.n	8005212 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	60fb      	str	r3, [r7, #12]
   return(result);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005264:	61fa      	str	r2, [r7, #28]
 8005266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	617b      	str	r3, [r7, #20]
   return(result);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e011      	b.n	80052b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3758      	adds	r7, #88	@ 0x58
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	e04f      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d04b      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fc f94d 	bl	8001570 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e04e      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d037      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b80      	cmp	r3, #128	@ 0x80
 80052fe:	d034      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	d031      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b08      	cmp	r3, #8
 8005312:	d110      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2208      	movs	r2, #8
 800531a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f838 	bl	8005392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2208      	movs	r2, #8
 8005326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e029      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005344:	d111      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800534e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f81e 	bl	8005392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e00f      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d0a0      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005392:	b480      	push	{r7}
 8005394:	b095      	sub	sp, #84	@ 0x54
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e6      	bne.n	800539a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3308      	adds	r3, #8
 80053d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	61fb      	str	r3, [r7, #28]
   return(result);
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e5      	bne.n	80053cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005404:	2b01      	cmp	r3, #1
 8005406:	d118      	bne.n	800543a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	60bb      	str	r3, [r7, #8]
   return(result);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 0310 	bic.w	r3, r3, #16
 800541c:	647b      	str	r3, [r7, #68]	@ 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	613b      	str	r3, [r7, #16]
   return(result);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e6      	bne.n	8005408 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800544e:	bf00      	nop
 8005450:	3754      	adds	r7, #84	@ 0x54
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <memset>:
 800545a:	4402      	add	r2, r0
 800545c:	4603      	mov	r3, r0
 800545e:	4293      	cmp	r3, r2
 8005460:	d100      	bne.n	8005464 <memset+0xa>
 8005462:	4770      	bx	lr
 8005464:	f803 1b01 	strb.w	r1, [r3], #1
 8005468:	e7f9      	b.n	800545e <memset+0x4>
	...

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	@ (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	@ (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	@ (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	@ (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 f818 	bl	80054b4 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08005504 	.word	0x08005504
 80054a8:	08005504 	.word	0x08005504
 80054ac:	08005504 	.word	0x08005504
 80054b0:	08005508 	.word	0x08005508

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr
